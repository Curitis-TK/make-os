     1 00000000                                 ; haribote-os boot asm
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4  = 00280000                              BOTPAK	EQU		0x280000		; bootpack的加载地址
     5  = 00100000                              DSKCAC	EQU		0x100000		; 磁盘缓存的位置
     6  = 00008000                              DSKCAC0	EQU		0x8000			; 磁盘缓存的位置(真实模式)
     7 00000000                                 
     8 00000000                                 ; BOOT_INFO 变量位置
     9  = 00000FF0                              CYLS	EQU		0x0ff0			; 引导扇区设置
    10  = 00000FF1                              LEDS	EQU		0x0ff1
    11  = 00000FF2                              VMODE	EQU		0x0ff2			; 关于颜色数量的信息。多少比特的颜色?
    12  = 00000FF4                              SCRNX	EQU		0x0ff4			; 分辨率X
    13  = 00000FF6                              SCRNY	EQU		0x0ff6			; 分辨率Y
    14  = 00000FF8                              VRAM	EQU		0x0ff8			; 图形缓冲的起始地址
    15 00000000                                 
    16 00000000                                 ; 程序内存地址
    17                                          ORG		0xc200
    18 0000C200                                 
    19 0000C200                                 ; 画面设定
    20 0000C200                                 
    21 0000C200                                 		; MOV		AL,0x13			; VGA图形，320x200 8bit色彩
    22 0000C200                                 		; MOV		AH,0x00
    23 0000C200                                 		; INT		0x10
    24 0000C200                                 		; MOV		BYTE [VMODE],8	; 记下画面模式（参考C语言）
    25 0000C200                                 		; MOV		WORD [SCRNX],320
    26 0000C200                                 		; MOV		WORD [SCRNY],200
    27 0000C200                                 		; MOV		DWORD [VRAM],0x000a0000
    28 0000C200                                 
    29 0000C200                                 		; MOV     BX,0x4101       ; VBE的640x480x8bi彩色
    30 0000C200                                         ; MOV     AX,0x4f02
    31 0000C200                                         ; INT     0x10
    32 0000C200                                         ; MOV     BYTE [VMODE],8  ; 记下画面模式（参考C语言）
    33 0000C200                                         ; MOV     WORD [SCRNX],640
    34 0000C200                                         ; MOV     WORD [SCRNY],480
    35 0000C200                                         ; MOV     DWORD [VRAM],0xe0000000
    36 0000C200                                 
    37 0000C200 BB 0105                         		MOV     BX,0x0105       ; VBE的1024x768x8bit彩色
    38 0000C203 B8 4F02                         		MOV     AX,0x4f02
    39 0000C206 CD 10                           		INT     0x10
    40 0000C208 C6 06 0FF2 08                   		MOV     BYTE [VMODE],8  ; 记下画面模式（参考C语言）
    41 0000C20D C7 06 0FF4 0400                 		MOV     WORD [SCRNX],1024
    42 0000C213 C7 06 0FF6 0300                 		MOV     WORD [SCRNY],768
    43 0000C219 66 C7 06 0FF8 E0000000          		MOV     DWORD [VRAM],0xe0000000
    44 0000C222                                 
    45 0000C222                                 ; 让BIOS告知键盘的LED状态
    46 0000C222                                 
    47 0000C222 B4 02                           		MOV		AH,0x02
    48 0000C224 CD 16                           		INT		0x16 			; keyboard BIOS
    49 0000C226 A2 0FF1                         		MOV		[LEDS],AL
    50 0000C229                                 
    51 0000C229                                 
    52 0000C229                                 ; PIC关闭一切中断
    53 0000C229                                 ;   根据AT兼容机的规格，如果要初始化PIC，
    54 0000C229                                 ;   必须在CLI之前进行，否则有时会挂起。
    55 0000C229                                 ;   随后进行PIC的初始化。
    56 0000C229                                 
    57 0000C229 B0 FF                           		MOV		AL,0xff
    58 0000C22B E6 21                           		OUT		0x21,AL
    59 0000C22D 90                              		NOP						; 让CPU休息一个时钟长的时间; 如果连续执行OUT指令，有些机种会无法正常运行
    60 0000C22E E6 A1                           		OUT		0xa1,AL
    61 0000C230                                 
    62 0000C230 FA                              		CLI						; 禁止CPU级别的中断
    63 0000C231                                 ; 同等与C程序中的:
    64 0000C231                                 ; io_out(PIC0_IMR, 0xff); 	/* 禁止主PIC的全部中断 */
    65 0000C231                                 ; io_out(PIC1_IMR, 0xff); 	/* 禁止从PIC的全部中断 */
    66 0000C231                                 ; io_cli(); 				/* 禁止CPU级别的中断*/
    67 0000C231                                 
    68 0000C231                                 
    69 0000C231                                 ; 为了让CPU能够访问1MB以上的内存空间，设定A20GATE
    70 0000C231 E8 00B5                         		CALL	waitkbdout
    71 0000C234 B0 D1                           		MOV		AL,0xd1
    72 0000C236 E6 64                           		OUT		0x64,AL
    73 0000C238 E8 00AE                         		CALL	waitkbdout
    74 0000C23B B0 DF                           		MOV		AL,0xdf			; enable A20
    75 0000C23D E6 60                           		OUT		0x60,AL
    76 0000C23F E8 00A7                         		CALL	waitkbdout
    77 0000C242                                 ; 同等于C程序中的:
    78 0000C242                                 ; #define KEYCMD_WRITE_OUTPORT    0xd1
    79 0000C242                                 ; #define KBC_OUTPORT_A20G_ENABLE 0xdf
    80 0000C242                                 ;     /* A20GATE的设定 */
    81 0000C242                                 ;     wait_KBC_sendready();
    82 0000C242                                 ;     io_out8(PORT_KEYCMD, KEYCMD_WRITE_OUTPORT);
    83 0000C242                                 ;     wait_KBC_sendready();
    84 0000C242                                 ;     io_out8(PORT_KEYDAT, KBC_OUTPORT_A20G_ENABLE);
    85 0000C242                                 ;     wait_KBC_sendready(); /* 这句话是为了等待完成执行指令 *
    86 0000C242                                 ; 和键盘控制程序十分相似
    87 0000C242                                 
    88 0000C242                                 
    89 0000C242                                 
    90 0000C242                                 
    91 0000C242                                 ; 切换到保护模式
    92 0000C242                                 
    93 0000C242                                 [INSTRSET "i486p"]				; “想要使用486指令”的叙述，之后就可以使用32位功能了
    94 0000C242                                 
    95 0000C242 0F 01 16 C32A                   		LGDT	[GDTR0]			; 设定临时GDT
    96 0000C247 0F 20 C0                        		MOV		EAX,CR0
    97 0000C24A 66 25 7FFFFFFF                  		AND		EAX,0x7fffffff	; 设第31位为0（禁止分页）
    98 0000C250 66 83 C8 01                     		OR		EAX,0x00000001	; 设第0位为1（切换到保护模式）
    99 0000C254 0F 22 C0                        		MOV		CR0,EAX
   100 0000C257 EB 00                           		JMP		pipelineflush
   101 0000C259                                 pipelineflush:
   102 0000C259 B8 0008                         		MOV		AX,1*8			;  可读写的段 32位
   103 0000C25C 8E D8                           		MOV		DS,AX
   104 0000C25E 8E C0                           		MOV		ES,AX
   105 0000C260 8E E0                           		MOV		FS,AX
   106 0000C262 8E E8                           		MOV		GS,AX
   107 0000C264 8E D0                           		MOV		SS,AX
   108 0000C266                                 
   109 0000C266                                 ; bootpack的转送
   110 0000C266                                 
   111 0000C266 66 BE 0000C330                  		MOV		ESI,bootpack	; 转送源地址
   112 0000C26C 66 BF 00280000                  		MOV		EDI,BOTPAK		; 转送目的地址
   113 0000C272 66 B9 00020000                  		MOV		ECX,512*1024/4	; 转送数据的大小 512KB
   114 0000C278 E8 0075                         		CALL	memcpy			; 调用内存复制
   115 0000C27B                                 
   116 0000C27B                                 ; 磁盘数据最终转送到它本来的位置去
   117 0000C27B                                 
   118 0000C27B                                 ; 首先从启动扇区IPL开始
   119 0000C27B                                 
   120 0000C27B 66 BE 00007C00                  		MOV		ESI,0x7c00		; 转送源地址
   121 0000C281 66 BF 00100000                  		MOV		EDI,DSKCAC		; 转送目的地址
   122 0000C287 66 B9 00000080                  		MOV		ECX,512/4		; 转送数据的大小 512字节
   123 0000C28D E8 0060                         		CALL	memcpy			; 调用内存复制
   124 0000C290                                 
   125 0000C290                                 
   126 0000C290                                 ; 所有剩下的
   127 0000C290                                 
   128 0000C290 66 BE 00008200                  		MOV		ESI,DSKCAC0+512	; 转送源地址
   129 0000C296 66 BF 00100200                  		MOV		EDI,DSKCAC+512	; 转送目的地址
   130 0000C29C 66 B9 00000000                  		MOV		ECX,0
   131 0000C2A2 8A 0E 0FF0                      		MOV		CL,BYTE [CYLS]
   132 0000C2A6 66 69 C9 00001200               		IMUL	ECX,512*18*2/4	; 从柱面数变换为字节数/4  512字节*18个柱面*2磁头
   133 0000C2AD 66 81 E9 00000080               		SUB		ECX,512/4		; 减去 IPL	512字节
   134 0000C2B4 E8 0039                         		CALL	memcpy
   135 0000C2B7                                 
   136 0000C2B7                                 ; asmheadでしなければいけないことは全部し終わったので、
   137 0000C2B7                                 ;	あとはbootpackに任せる
   138 0000C2B7                                 
   139 0000C2B7                                 ; bootpackの起動
   140 0000C2B7                                 
   141 0000C2B7 66 BB 00280000                  		MOV		EBX,BOTPAK
   142 0000C2BD 67 66 8B 4B 10                  		MOV		ECX,[EBX+16]
   143 0000C2C2 66 83 C1 03                     		ADD		ECX,3			; ECX += 3;
   144 0000C2C6 66 C1 E9 02                     		SHR		ECX,2			; ECX /= 4;
   145 0000C2CA 74 10                           		JZ		skip			; 転送するべきものがない
   146 0000C2CC 67 66 8B 73 14                  		MOV		ESI,[EBX+20]	; 転送元
   147 0000C2D1 66 01 DE                        		ADD		ESI,EBX
   148 0000C2D4 67 66 8B 7B 0C                  		MOV		EDI,[EBX+12]	; 転送先
   149 0000C2D9 E8 0014                         		CALL	memcpy
   150 0000C2DC                                 skip:
   151 0000C2DC 67 66 8B 63 0C                  		MOV		ESP,[EBX+12]	; スタック初期値
   152 0000C2E1 66 EA 0000001B 0010             		JMP		DWORD 2*8:0x0000001b
   153 0000C2E9                                 
   154 0000C2E9                                 waitkbdout:
   155 0000C2E9 E4 64                           		IN		 AL,0x64
   156 0000C2EB 24 02                           		AND		 AL,0x02
   157 0000C2ED 75 FA                           		JNZ		waitkbdout		; ANDの結果が0でなければwaitkbdoutへ
   158 0000C2EF C3                              		RET
   159 0000C2F0                                 
   160 0000C2F0                                 memcpy:
   161 0000C2F0 67 66 8B 06                     		MOV		EAX,[ESI]
   162 0000C2F4 66 83 C6 04                     		ADD		ESI,4
   163 0000C2F8 67 66 89 07                     		MOV		[EDI],EAX
   164 0000C2FC 66 83 C7 04                     		ADD		EDI,4
   165 0000C300 66 83 E9 01                     		SUB		ECX,1
   166 0000C304 75 EA                           		JNZ		memcpy			; 引き算した結果が0でなければmemcpyへ
   167 0000C306 C3                              		RET
   168 0000C307                                 ; memcpyはアドレスサイズプリフィクスを入れ忘れなければ、ストリング命令でも書ける
   169 0000C307                                 
   170 0000C307 00 00 00 00 00 00 00 00 00      		ALIGNB	16
   171 0000C310                                 GDT0:
   172 0000C310 00 00 00 00 00 00 00 00         		RESB	8				; ヌルセレクタ
   173 0000C318 FFFF 0000 9200 00CF             		DW		0xffff,0x0000,0x9200,0x00cf	; 読み書き可能セグメント32bit
   174 0000C320 FFFF 0000 9A28 0047             		DW		0xffff,0x0000,0x9a28,0x0047	; 実行可能セグメント32bit（bootpack用）
   175 0000C328                                 
   176 0000C328 0000                            		DW		0
   177 0000C32A                                 GDTR0:
   178 0000C32A 0017                            		DW		8*3-1
   179 0000C32C 0000C310                        		DD		GDT0
   180 0000C330                                 
   181 0000C330                                 		ALIGNB	16
   182 0000C330                                 bootpack:
