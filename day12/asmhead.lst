     1 00000000                                 ; haribote-os boot asm
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4  = 00280000                              BOTPAK	EQU		0x280000		; bootpack的加载地址
     5  = 00100000                              DSKCAC	EQU		0x100000		; 磁盘缓存的位置
     6  = 00008000                              DSKCAC0	EQU		0x8000			; 磁盘缓存的位置(真实模式)
     7 00000000                                 
     8 00000000                                 ; BOOT_INFO 变量位置
     9  = 00000FF0                              CYLS	EQU		0x0ff0			; 引导扇区设置
    10  = 00000FF1                              LEDS	EQU		0x0ff1
    11  = 00000FF2                              VMODE	EQU		0x0ff2			; 关于颜色数量的信息。多少比特的颜色?
    12  = 00000FF4                              SCRNX	EQU		0x0ff4			; 分辨率X
    13  = 00000FF6                              SCRNY	EQU		0x0ff6			; 分辨率Y
    14  = 00000FF8                              VRAM	EQU		0x0ff8			; 图形缓冲的起始地址
    15 00000000                                 
    16 00000000                                 ; 程序内存地址
    17                                          ORG		0xc200
    18 0000C200                                 
    19 0000C200                                 ; 画面设定
    20 0000C200                                 
    21 0000C200 B0 13                           		MOV		AL,0x13			; VGA图形，320x200 8bit色彩
    22 0000C202 B4 00                           		MOV		AH,0x00
    23 0000C204 CD 10                           		INT		0x10
    24 0000C206 C6 06 0FF2 08                   		MOV		BYTE [VMODE],8	; 画面モードをメモする（C言語が参照する）
    25 0000C20B C7 06 0FF4 0140                 		MOV		WORD [SCRNX],320
    26 0000C211 C7 06 0FF6 00C8                 		MOV		WORD [SCRNY],200
    27 0000C217 66 C7 06 0FF8 000A0000          		MOV		DWORD [VRAM],0x000a0000
    28 0000C220                                 
    29 0000C220                                 ; 让BIOS告知键盘的LED状态
    30 0000C220                                 
    31 0000C220 B4 02                           		MOV		AH,0x02
    32 0000C222 CD 16                           		INT		0x16 			; keyboard BIOS
    33 0000C224 A2 0FF1                         		MOV		[LEDS],AL
    34 0000C227                                 
    35 0000C227                                 
    36 0000C227                                 ; PIC关闭一切中断
    37 0000C227                                 ;   根据AT兼容机的规格，如果要初始化PIC，
    38 0000C227                                 ;   必须在CLI之前进行，否则有时会挂起。
    39 0000C227                                 ;   随后进行PIC的初始化。
    40 0000C227                                 
    41 0000C227 B0 FF                           		MOV		AL,0xff
    42 0000C229 E6 21                           		OUT		0x21,AL
    43 0000C22B 90                              		NOP						; 让CPU休息一个时钟长的时间; 如果连续执行OUT指令，有些机种会无法正常运行
    44 0000C22C E6 A1                           		OUT		0xa1,AL
    45 0000C22E                                 
    46 0000C22E FA                              		CLI						; 禁止CPU级别的中断
    47 0000C22F                                 ; 同等与C程序中的:
    48 0000C22F                                 ; io_out(PIC0_IMR, 0xff); 	/* 禁止主PIC的全部中断 */
    49 0000C22F                                 ; io_out(PIC1_IMR, 0xff); 	/* 禁止从PIC的全部中断 */
    50 0000C22F                                 ; io_cli(); 				/* 禁止CPU级别的中断*/
    51 0000C22F                                 
    52 0000C22F                                 
    53 0000C22F                                 ; 为了让CPU能够访问1MB以上的内存空间，设定A20GATE
    54 0000C22F E8 00B5                         		CALL	waitkbdout
    55 0000C232 B0 D1                           		MOV		AL,0xd1
    56 0000C234 E6 64                           		OUT		0x64,AL
    57 0000C236 E8 00AE                         		CALL	waitkbdout
    58 0000C239 B0 DF                           		MOV		AL,0xdf			; enable A20
    59 0000C23B E6 60                           		OUT		0x60,AL
    60 0000C23D E8 00A7                         		CALL	waitkbdout
    61 0000C240                                 ; 同等于C程序中的:
    62 0000C240                                 ; #define KEYCMD_WRITE_OUTPORT    0xd1
    63 0000C240                                 ; #define KBC_OUTPORT_A20G_ENABLE 0xdf
    64 0000C240                                 ;     /* A20GATE的设定 */
    65 0000C240                                 ;     wait_KBC_sendready();
    66 0000C240                                 ;     io_out8(PORT_KEYCMD, KEYCMD_WRITE_OUTPORT);
    67 0000C240                                 ;     wait_KBC_sendready();
    68 0000C240                                 ;     io_out8(PORT_KEYDAT, KBC_OUTPORT_A20G_ENABLE);
    69 0000C240                                 ;     wait_KBC_sendready(); /* 这句话是为了等待完成执行指令 *
    70 0000C240                                 ; 和键盘控制程序十分相似
    71 0000C240                                 
    72 0000C240                                 
    73 0000C240                                 
    74 0000C240                                 
    75 0000C240                                 ; 切换到保护模式
    76 0000C240                                 
    77 0000C240                                 [INSTRSET "i486p"]				; “想要使用486指令”的叙述，之后就可以使用32位功能了
    78 0000C240                                 
    79 0000C240 0F 01 16 C32A                   		LGDT	[GDTR0]			; 设定临时GDT
    80 0000C245 0F 20 C0                        		MOV		EAX,CR0
    81 0000C248 66 25 7FFFFFFF                  		AND		EAX,0x7fffffff	; 设第31位为0（禁止分页）
    82 0000C24E 66 83 C8 01                     		OR		EAX,0x00000001	; 设第0位为1（切换到保护模式）
    83 0000C252 0F 22 C0                        		MOV		CR0,EAX
    84 0000C255 EB 00                           		JMP		pipelineflush
    85 0000C257                                 pipelineflush:
    86 0000C257 B8 0008                         		MOV		AX,1*8			;  可读写的段 32位
    87 0000C25A 8E D8                           		MOV		DS,AX
    88 0000C25C 8E C0                           		MOV		ES,AX
    89 0000C25E 8E E0                           		MOV		FS,AX
    90 0000C260 8E E8                           		MOV		GS,AX
    91 0000C262 8E D0                           		MOV		SS,AX
    92 0000C264                                 
    93 0000C264                                 ; bootpack的转送
    94 0000C264                                 
    95 0000C264 66 BE 0000C330                  		MOV		ESI,bootpack	; 转送源地址
    96 0000C26A 66 BF 00280000                  		MOV		EDI,BOTPAK		; 转送目的地址
    97 0000C270 66 B9 00020000                  		MOV		ECX,512*1024/4	; 转送数据的大小 512KB
    98 0000C276 E8 0075                         		CALL	memcpy			; 调用内存复制
    99 0000C279                                 
   100 0000C279                                 ; 磁盘数据最终转送到它本来的位置去
   101 0000C279                                 
   102 0000C279                                 ; 首先从启动扇区IPL开始
   103 0000C279                                 
   104 0000C279 66 BE 00007C00                  		MOV		ESI,0x7c00		; 转送源地址
   105 0000C27F 66 BF 00100000                  		MOV		EDI,DSKCAC		; 转送目的地址
   106 0000C285 66 B9 00000080                  		MOV		ECX,512/4		; 转送数据的大小 512字节
   107 0000C28B E8 0060                         		CALL	memcpy			; 调用内存复制
   108 0000C28E                                 
   109 0000C28E                                 
   110 0000C28E                                 ; 所有剩下的
   111 0000C28E                                 
   112 0000C28E 66 BE 00008200                  		MOV		ESI,DSKCAC0+512	; 转送源地址
   113 0000C294 66 BF 00100200                  		MOV		EDI,DSKCAC+512	; 转送目的地址
   114 0000C29A 66 B9 00000000                  		MOV		ECX,0
   115 0000C2A0 8A 0E 0FF0                      		MOV		CL,BYTE [CYLS]
   116 0000C2A4 66 69 C9 00001200               		IMUL	ECX,512*18*2/4	; 从柱面数变换为字节数/4  512字节*18个柱面*2磁头
   117 0000C2AB 66 81 E9 00000080               		SUB		ECX,512/4		; 减去 IPL	512字节
   118 0000C2B2 E8 0039                         		CALL	memcpy
   119 0000C2B5                                 
   120 0000C2B5                                 ; asmheadでしなければいけないことは全部し終わったので、
   121 0000C2B5                                 ;	あとはbootpackに任せる
   122 0000C2B5                                 
   123 0000C2B5                                 ; bootpackの起動
   124 0000C2B5                                 
   125 0000C2B5 66 BB 00280000                  		MOV		EBX,BOTPAK
   126 0000C2BB 67 66 8B 4B 10                  		MOV		ECX,[EBX+16]
   127 0000C2C0 66 83 C1 03                     		ADD		ECX,3			; ECX += 3;
   128 0000C2C4 66 C1 E9 02                     		SHR		ECX,2			; ECX /= 4;
   129 0000C2C8 74 10                           		JZ		skip			; 転送するべきものがない
   130 0000C2CA 67 66 8B 73 14                  		MOV		ESI,[EBX+20]	; 転送元
   131 0000C2CF 66 01 DE                        		ADD		ESI,EBX
   132 0000C2D2 67 66 8B 7B 0C                  		MOV		EDI,[EBX+12]	; 転送先
   133 0000C2D7 E8 0014                         		CALL	memcpy
   134 0000C2DA                                 skip:
   135 0000C2DA 67 66 8B 63 0C                  		MOV		ESP,[EBX+12]	; スタック初期値
   136 0000C2DF 66 EA 0000001B 0010             		JMP		DWORD 2*8:0x0000001b
   137 0000C2E7                                 
   138 0000C2E7                                 waitkbdout:
   139 0000C2E7 E4 64                           		IN		 AL,0x64
   140 0000C2E9 24 02                           		AND		 AL,0x02
   141 0000C2EB 75 FA                           		JNZ		waitkbdout		; ANDの結果が0でなければwaitkbdoutへ
   142 0000C2ED C3                              		RET
   143 0000C2EE                                 
   144 0000C2EE                                 memcpy:
   145 0000C2EE 67 66 8B 06                     		MOV		EAX,[ESI]
   146 0000C2F2 66 83 C6 04                     		ADD		ESI,4
   147 0000C2F6 67 66 89 07                     		MOV		[EDI],EAX
   148 0000C2FA 66 83 C7 04                     		ADD		EDI,4
   149 0000C2FE 66 83 E9 01                     		SUB		ECX,1
   150 0000C302 75 EA                           		JNZ		memcpy			; 引き算した結果が0でなければmemcpyへ
   151 0000C304 C3                              		RET
   152 0000C305                                 ; memcpyはアドレスサイズプリフィクスを入れ忘れなければ、ストリング命令でも書ける
   153 0000C305                                 
   154 0000C305 00 00 00 00 00 00 00 00 00 00   		ALIGNB	16
       0000C30F 00 
   155 0000C310                                 GDT0:
   156 0000C310 00 00 00 00 00 00 00 00         		RESB	8				; ヌルセレクタ
   157 0000C318 FFFF 0000 9200 00CF             		DW		0xffff,0x0000,0x9200,0x00cf	; 読み書き可能セグメント32bit
   158 0000C320 FFFF 0000 9A28 0047             		DW		0xffff,0x0000,0x9a28,0x0047	; 実行可能セグメント32bit（bootpack用）
   159 0000C328                                 
   160 0000C328 0000                            		DW		0
   161 0000C32A                                 GDTR0:
   162 0000C32A 0017                            		DW		8*3-1
   163 0000C32C 0000C310                        		DD		GDT0
   164 0000C330                                 
   165 0000C330                                 		ALIGNB	16
   166 0000C330                                 bootpack:
